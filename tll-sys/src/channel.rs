/* automatically generated by rust-bindgen 0.60.1 */

#![allow(dead_code, non_camel_case_types, non_upper_case_globals, non_snake_case)]
use crate::config::tll_config_t;
use crate::logger::{tll_logger_t, tll_logger_level_t};
use crate::scheme::tll_scheme_t;
use crate::stat::*;

pub const TLL_CHANNEL_MODULE_VERSION: u32 = 2;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub const TLL_STATE_CLOSED: tll_state_t = 0;
pub const TLL_STATE_OPENING: tll_state_t = 1;
pub const TLL_STATE_ACTIVE: tll_state_t = 2;
pub const TLL_STATE_CLOSING: tll_state_t = 3;
pub const TLL_STATE_ERROR: tll_state_t = 4;
pub const TLL_STATE_DESTROY: tll_state_t = 5;
pub type tll_state_t = ::std::os::raw::c_uint;
pub const TLL_MESSAGE_DATA: tll_msg_type_t = 0;
pub const TLL_MESSAGE_CONTROL: tll_msg_type_t = 1;
pub const TLL_MESSAGE_STATE: tll_msg_type_t = 2;
pub const TLL_MESSAGE_CHANNEL: tll_msg_type_t = 3;
pub type tll_msg_type_t = ::std::os::raw::c_uint;
pub const TLL_MESSAGE_CHANNEL_UPDATE: tll_msg_channel_t = 0;
pub const TLL_MESSAGE_CHANNEL_ADD: tll_msg_channel_t = 1;
pub const TLL_MESSAGE_CHANNEL_DELETE: tll_msg_channel_t = 2;
pub const TLL_MESSAGE_CHANNEL_UPDATE_FD: tll_msg_channel_t = 3;
pub type tll_msg_channel_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union tll_addr_t {
    pub u64_: u64,
    pub i64_: i64,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tll_addr_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_addr_t>(),
        8usize,
        concat!("Size of: ", stringify!(tll_addr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_addr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_addr_t))
    );
    fn test_field_u64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_addr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u64_) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(tll_addr_t), "::", stringify!(u64_))
        );
    }
    test_field_u64();
    fn test_field_i64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_addr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).i64_) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(tll_addr_t), "::", stringify!(i64_))
        );
    }
    test_field_i64();
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_addr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(tll_addr_t), "::", stringify!(ptr))
        );
    }
    test_field_ptr();
}
impl ::std::fmt::Debug for tll_addr_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "tll_addr_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tll_msg_t {
    pub type_: ::std::os::raw::c_short,
    pub flags: ::std::os::raw::c_short,
    pub msgid: ::std::os::raw::c_int,
    pub seq: ::std::os::raw::c_longlong,
    pub pad0: *const ::std::os::raw::c_void,
    pub data: *const ::std::os::raw::c_void,
    pub size: usize,
    pub addr: tll_addr_t,
    pub time: ::std::os::raw::c_longlong,
    pub reserved: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_tll_msg_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_msg_t>(),
        64usize,
        concat!("Size of: ", stringify!(tll_msg_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_msg_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_msg_t))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(type_))
        );
    }
    test_field_type();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            2usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(flags))
        );
    }
    test_field_flags();
    fn test_field_msgid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).msgid) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(msgid))
        );
    }
    test_field_msgid();
    fn test_field_seq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(seq))
        );
    }
    test_field_seq();
    fn test_field_pad0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pad0) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(pad0))
        );
    }
    test_field_pad0();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            24usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(data))
        );
    }
    test_field_data();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            32usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(size))
        );
    }
    test_field_size();
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            40usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(addr))
        );
    }
    test_field_addr();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            48usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(time))
        );
    }
    test_field_time();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_msg_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            56usize,
            concat!("Offset of field: ", stringify!(tll_msg_t), "::", stringify!(reserved))
        );
    }
    test_field_reserved();
}
impl ::std::fmt::Debug for tll_msg_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "tll_msg_t {{ type: {:?}, flags: {:?}, msgid: {:?}, seq: {:?}, pad0: {:?}, data: {:?}, size: {:?}, addr: {:?}, time: {:?}, reserved: {:?} }}" , self . type_ , self . flags , self . msgid , self . seq , self . pad0 , self . data , self . size , self . addr , self . time , self . reserved)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_channel_context_t {
    _unused: [u8; 0],
}
pub const TLL_CAPS_PARENT: tll_channel_cap_t = 1;
pub const TLL_CAPS_PROXY: tll_channel_cap_t = 2;
pub const TLL_CAPS_INPUT: tll_channel_cap_t = 4;
pub const TLL_CAPS_OUTPUT: tll_channel_cap_t = 8;
pub const TLL_CAPS_INOUT: tll_channel_cap_t = 12;
pub const TLL_CAPS_CUSTOM: tll_channel_cap_t = 16;
pub const TLL_CAPS_LONG_CLOSE: tll_channel_cap_t = 32;
pub type tll_channel_cap_t = ::std::os::raw::c_uint;
pub const TLL_DCAPS_ZERO: tll_channel_dcap_t = 0;
pub const TLL_DCAPS_POLLIN: tll_channel_dcap_t = 1;
pub const TLL_DCAPS_POLLOUT: tll_channel_dcap_t = 2;
pub const TLL_DCAPS_POLLMASK: tll_channel_dcap_t = 3;
pub const TLL_DCAPS_PROCESS: tll_channel_dcap_t = 16;
pub const TLL_DCAPS_PENDING: tll_channel_dcap_t = 32;
pub const TLL_DCAPS_SUSPEND: tll_channel_dcap_t = 64;
pub const TLL_DCAPS_SUSPEND_PERMANENT: tll_channel_dcap_t = 128;
pub const TLL_DCAPS_PROCESS_MASK: tll_channel_dcap_t = 80;
pub type tll_channel_dcap_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_channel_list_t {
    pub channel: *mut tll_channel_t,
    pub next: *mut tll_channel_list_t,
}
#[test]
fn bindgen_test_layout_tll_channel_list_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_channel_list_t>(),
        16usize,
        concat!("Size of: ", stringify!(tll_channel_list_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_channel_list_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_channel_list_t))
    );
    fn test_field_channel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_list_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_list_t),
                "::",
                stringify!(channel)
            )
        );
    }
    test_field_channel();
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_list_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_list_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_channel_t {
    pub impl_: *const tll_channel_impl_t,
    pub data: *mut ::std::os::raw::c_void,
    pub internal: *mut tll_channel_internal_t,
    pub context: *mut tll_channel_context_t,
    pub parent: *mut tll_channel_t,
}
#[test]
fn bindgen_test_layout_tll_channel_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_channel_t>(),
        40usize,
        concat!("Size of: ", stringify!(tll_channel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_channel_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_channel_t))
    );
    fn test_field_impl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(tll_channel_t), "::", stringify!(impl_))
        );
    }
    test_field_impl();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(tll_channel_t), "::", stringify!(data))
        );
    }
    test_field_data();
    fn test_field_internal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_t),
                "::",
                stringify!(internal)
            )
        );
    }
    test_field_internal();
    fn test_field_context() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_t),
                "::",
                stringify!(context)
            )
        );
    }
    test_field_context();
    fn test_field_parent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize
            },
            32usize,
            concat!("Offset of field: ", stringify!(tll_channel_t), "::", stringify!(parent))
        );
    }
    test_field_parent();
}
pub const TLL_MESSAGE_MASK_DATA: tll_message_mask_t = 1;
pub const TLL_MESSAGE_MASK_CONTROL: tll_message_mask_t = 2;
pub const TLL_MESSAGE_MASK_STATE: tll_message_mask_t = 4;
pub const TLL_MESSAGE_MASK_CHANNEL: tll_message_mask_t = 8;
pub const TLL_MESSAGE_MASK_ALL: tll_message_mask_t = 4294967287;
pub type tll_message_mask_t = ::std::os::raw::c_uint;
pub type tll_channel_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        channel: *const tll_channel_t,
        msg: *const tll_msg_t,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn tll_channel_callback_add(
        arg1: *mut tll_channel_t,
        cb: tll_channel_callback_t,
        user: *mut ::std::os::raw::c_void,
        mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_callback_del(
        arg1: *mut tll_channel_t,
        cb: tll_channel_callback_t,
        user: *mut ::std::os::raw::c_void,
        mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_new(
        ctx: *mut tll_channel_context_t,
        str_: *const ::std::os::raw::c_char,
        len: usize,
        master: *mut tll_channel_t,
        impl_: *const tll_channel_impl_t,
    ) -> *mut tll_channel_t;
}
extern "C" {
    pub fn tll_channel_new_url(
        ctx: *mut tll_channel_context_t,
        url: *const tll_config_t,
        master: *mut tll_channel_t,
        impl_: *const tll_channel_impl_t,
    ) -> *mut tll_channel_t;
}
extern "C" {
    pub fn tll_channel_free(arg1: *mut tll_channel_t);
}
extern "C" {
    pub fn tll_channel_open(
        arg1: *mut tll_channel_t,
        str_: *const ::std::os::raw::c_char,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_open_cfg(arg1: *mut tll_channel_t, cfg: *const tll_config_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_close(arg1: *mut tll_channel_t, force: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_process(
        c: *mut tll_channel_t,
        timeout: ::std::os::raw::c_long,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const TLL_POST_MORE: tll_channel_post_flag_t = 1;
pub type tll_channel_post_flag_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn tll_channel_post(
        c: *mut tll_channel_t,
        msg: *const tll_msg_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_suspend(c: *mut tll_channel_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_resume(c: *mut tll_channel_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_state(c: *const tll_channel_t) -> tll_state_t;
}
extern "C" {
    pub fn tll_channel_name(c: *const tll_channel_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tll_channel_caps(c: *const tll_channel_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn tll_channel_dcaps(c: *const tll_channel_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn tll_channel_fd(c: *const tll_channel_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_context(c: *const tll_channel_t) -> *mut tll_channel_context_t;
}
extern "C" {
    pub fn tll_channel_config(c: *mut tll_channel_t) -> *mut tll_config_t;
}
extern "C" {
    pub fn tll_channel_children(c: *const tll_channel_t) -> *const tll_channel_list_t;
}
extern "C" {
    pub fn tll_channel_scheme(c: *const tll_channel_t, type_: ::std::os::raw::c_int) -> *const tll_scheme_t;
}
extern "C" {
    pub fn tll_channel_get(
        ctx: *const tll_channel_context_t,
        name: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut tll_channel_t;
}
extern "C" {
    pub fn tll_channel_context_new(defaults: *mut tll_config_t) -> *mut tll_channel_context_t;
}
extern "C" {
    pub fn tll_channel_context_ref(arg1: *mut tll_channel_context_t) -> *mut tll_channel_context_t;
}
extern "C" {
    pub fn tll_channel_context_default() -> *mut tll_channel_context_t;
}
extern "C" {
    pub fn tll_channel_context_free(arg1: *mut tll_channel_context_t);
}
extern "C" {
    pub fn tll_channel_context_config(arg1: *mut tll_channel_context_t) -> *mut tll_config_t;
}
extern "C" {
    pub fn tll_channel_context_config_defaults(arg1: *mut tll_channel_context_t) -> *mut tll_config_t;
}
extern "C" {
    pub fn tll_channel_context_stat_list(arg1: *mut tll_channel_context_t) -> *mut tll_stat_list_t;
}
extern "C" {
    pub fn tll_channel_context_scheme_load(
        ctx: *mut tll_channel_context_t,
        url: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        cache: ::std::os::raw::c_int,
    ) -> *const tll_scheme_t;
}
extern "C" {
    pub fn tll_channel_impl_register(
        ctx: *mut tll_channel_context_t,
        impl_: *const tll_channel_impl_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_impl_unregister(
        ctx: *mut tll_channel_context_t,
        impl_: *const tll_channel_impl_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_impl_get(
        ctx: *const tll_channel_context_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const tll_channel_impl_t;
}
extern "C" {
    pub fn tll_channel_alias_register_url(
        ctx: *mut tll_channel_context_t,
        name: *const ::std::os::raw::c_char,
        cfg: *const tll_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_alias_unregister_url(
        ctx: *mut tll_channel_context_t,
        name: *const ::std::os::raw::c_char,
        cfg: *const tll_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_alias_register(
        ctx: *mut tll_channel_context_t,
        name: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_alias_unregister(
        ctx: *mut tll_channel_context_t,
        name: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_module_load_cfg(
        ctx: *mut tll_channel_context_t,
        module: *const ::std::os::raw::c_char,
        symbol: *const ::std::os::raw::c_char,
        cfg: *const tll_config_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_module_load(
        ctx: *mut tll_channel_context_t,
        module: *const ::std::os::raw::c_char,
        symbol: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_module_unload(
        ctx: *mut tll_channel_context_t,
        module: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_channel_impl_t {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut tll_channel_t,
            url: *const tll_config_t,
            master: *mut tll_channel_t,
            ctx: *mut tll_channel_context_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut tll_channel_t)>,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut tll_channel_t, arg2: *const tll_config_t) -> ::std::os::raw::c_int,
    >,
    pub close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut tll_channel_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub process: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut tll_channel_t,
            timeout: ::std::os::raw::c_long,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub post: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut tll_channel_t,
            msg: *const tll_msg_t,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub scheme: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const tll_channel_t, arg2: ::std::os::raw::c_int) -> *const tll_scheme_t,
    >,
    pub name: *const ::std::os::raw::c_char,
    pub prefix: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_tll_channel_impl_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_channel_impl_t>(),
        80usize,
        concat!("Size of: ", stringify!(tll_channel_impl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_channel_impl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_channel_impl_t))
    );
    fn test_field_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(init)
            )
        );
    }
    test_field_init();
    fn test_field_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(free)
            )
        );
    }
    test_field_free();
    fn test_field_open() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(open)
            )
        );
    }
    test_field_open();
    fn test_field_close() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(close)
            )
        );
    }
    test_field_close();
    fn test_field_process() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).process) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(process)
            )
        );
    }
    test_field_process();
    fn test_field_post() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).post) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(post)
            )
        );
    }
    test_field_post();
    fn test_field_scheme() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scheme) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(scheme)
            )
        );
    }
    test_field_scheme();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_prefix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prefix) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(prefix)
            )
        );
    }
    test_field_prefix();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_impl_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_impl_t),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
pub struct tll_channel_stat_t {
    pub rx: tll_stat_field_t,
    pub rxb: tll_stat_field_t,
    pub tx: tll_stat_field_t,
    pub txb: tll_stat_field_t,
}
#[test]
fn bindgen_test_layout_tll_channel_stat_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_channel_stat_t>(),
        64usize,
        concat!("Size of: ", stringify!(tll_channel_stat_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_channel_stat_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_channel_stat_t))
    );
    fn test_field_rx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_stat_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_stat_t),
                "::",
                stringify!(rx)
            )
        );
    }
    test_field_rx();
    fn test_field_rxb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_stat_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rxb) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_stat_t),
                "::",
                stringify!(rxb)
            )
        );
    }
    test_field_rxb();
    fn test_field_tx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_stat_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tx) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_stat_t),
                "::",
                stringify!(tx)
            )
        );
    }
    test_field_tx();
    fn test_field_txb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_stat_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).txb) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_stat_t),
                "::",
                stringify!(txb)
            )
        );
    }
    test_field_txb();
}
impl ::std::fmt::Debug for tll_channel_stat_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "tll_channel_stat_t {{  }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_channel_callback_pair_t {
    pub cb: tll_channel_callback_t,
    pub user: *mut ::std::os::raw::c_void,
    pub mask: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_tll_channel_callback_pair_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_channel_callback_pair_t>(),
        24usize,
        concat!("Size of: ", stringify!(tll_channel_callback_pair_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_channel_callback_pair_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_channel_callback_pair_t))
    );
    fn test_field_cb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_callback_pair_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_callback_pair_t),
                "::",
                stringify!(cb)
            )
        );
    }
    test_field_cb();
    fn test_field_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_callback_pair_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_callback_pair_t),
                "::",
                stringify!(user)
            )
        );
    }
    test_field_user();
    fn test_field_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_callback_pair_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_callback_pair_t),
                "::",
                stringify!(mask)
            )
        );
    }
    test_field_mask();
}
pub const TLL_MESSAGE_LOG_DISABLE: tll_channel_log_msg_format_t = 0;
pub const TLL_MESSAGE_LOG_FRAME: tll_channel_log_msg_format_t = 1;
pub const TLL_MESSAGE_LOG_TEXT: tll_channel_log_msg_format_t = 2;
pub const TLL_MESSAGE_LOG_TEXT_HEX: tll_channel_log_msg_format_t = 3;
pub const TLL_MESSAGE_LOG_SCHEME: tll_channel_log_msg_format_t = 4;
pub const TLL_MESSAGE_LOG_AUTO: tll_channel_log_msg_format_t = 5;
pub type tll_channel_log_msg_format_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn tll_channel_log_msg(
        c: *const tll_channel_t,
        log: *const ::std::os::raw::c_char,
        level: tll_logger_level_t,
        format: tll_channel_log_msg_format_t,
        msg: *const tll_msg_t,
        text: *const ::std::os::raw::c_char,
        tlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const TLL_CHANNEL_INTERNAL_V0: tll_channel_internal_version_t = 0;
pub const TLL_CHANNEL_INTERNAL_V1: tll_channel_internal_version_t = 1;
pub const TLL_CHANNEL_INTERNAL_VERSION_CURRENT: tll_channel_internal_version_t = 1;
pub type tll_channel_internal_version_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_channel_internal_t {
    pub state: tll_state_t,
    pub version: ::std::os::raw::c_int,
    pub self_: *mut tll_channel_t,
    pub name: *const ::std::os::raw::c_char,
    pub caps: ::std::os::raw::c_uint,
    pub dcaps: ::std::os::raw::c_uint,
    pub fd: ::std::os::raw::c_int,
    pub dump: tll_channel_log_msg_format_t,
    pub config: *mut tll_config_t,
    pub children: *mut tll_channel_list_t,
    pub data_cb_size: ::std::os::raw::c_uint,
    pub data_cb: *mut tll_channel_callback_pair_t,
    pub cb_size: ::std::os::raw::c_uint,
    pub cb: *mut tll_channel_callback_pair_t,
    pub stat: *mut tll_stat_block_t,
    pub logger: *mut tll_logger_t,
    pub reserved: [isize; 4usize],
}
#[test]
fn bindgen_test_layout_tll_channel_internal_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_channel_internal_t>(),
        136usize,
        concat!("Size of: ", stringify!(tll_channel_internal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_channel_internal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_channel_internal_t))
    );
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).self_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(self_)
            )
        );
    }
    test_field_self();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_caps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).caps) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(caps)
            )
        );
    }
    test_field_caps();
    fn test_field_dcaps() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dcaps) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(dcaps)
            )
        );
    }
    test_field_dcaps();
    fn test_field_fd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(fd)
            )
        );
    }
    test_field_fd();
    fn test_field_dump() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dump) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(dump)
            )
        );
    }
    test_field_dump();
    fn test_field_config() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(config)
            )
        );
    }
    test_field_config();
    fn test_field_children() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).children) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(children)
            )
        );
    }
    test_field_children();
    fn test_field_data_cb_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_cb_size) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(data_cb_size)
            )
        );
    }
    test_field_data_cb_size();
    fn test_field_data_cb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_cb) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(data_cb)
            )
        );
    }
    test_field_data_cb();
    fn test_field_cb_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cb_size) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(cb_size)
            )
        );
    }
    test_field_cb_size();
    fn test_field_cb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cb) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(cb)
            )
        );
    }
    test_field_cb();
    fn test_field_stat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(stat)
            )
        );
    }
    test_field_stat();
    fn test_field_logger() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).logger) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(logger)
            )
        );
    }
    test_field_logger();
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_internal_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_internal_t),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
}
extern "C" {
    pub fn tll_channel_list_free(l: *mut tll_channel_list_t);
}
extern "C" {
    pub fn tll_channel_list_add(l: *mut *mut tll_channel_list_t, c: *mut tll_channel_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_list_del(l: *mut *mut tll_channel_list_t, c: *const tll_channel_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_internal_init(ptr: *mut tll_channel_internal_t);
}
extern "C" {
    pub fn tll_channel_internal_clear(ptr: *mut tll_channel_internal_t);
}
extern "C" {
    pub fn tll_channel_internal_child_add(
        ptr: *mut tll_channel_internal_t,
        c: *mut tll_channel_t,
        tag: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_channel_internal_child_del(
        ptr: *mut tll_channel_internal_t,
        c: *const tll_channel_t,
        tag: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const TLL_CHANNEL_MODULE_DLOPEN_GLOBAL: tll_channel_module_flags_t = 1;
pub type tll_channel_module_flags_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_channel_module_t {
    pub version: ::std::os::raw::c_int,
    pub impl_: *mut *mut tll_channel_impl_t,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            m: *mut tll_channel_module_t,
            ctx: *mut tll_channel_context_t,
            cfg: *const tll_config_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(m: *mut tll_channel_module_t, ctx: *mut tll_channel_context_t) -> ::std::os::raw::c_int,
    >,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_tll_channel_module_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_channel_module_t>(),
        40usize,
        concat!("Size of: ", stringify!(tll_channel_module_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_channel_module_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_channel_module_t))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_module_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_module_t),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_impl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_module_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_module_t),
                "::",
                stringify!(impl_)
            )
        );
    }
    test_field_impl();
    fn test_field_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_module_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_module_t),
                "::",
                stringify!(init)
            )
        );
    }
    test_field_init();
    fn test_field_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_module_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_module_t),
                "::",
                stringify!(free)
            )
        );
    }
    test_field_free();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_channel_module_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_channel_module_t),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
pub type tll_channel_module_init_v1_t = ::std::option::Option<
    unsafe extern "C" fn(m: *mut tll_channel_module_t, ctx: *mut tll_channel_context_t) -> ::std::os::raw::c_int,
>;
pub type tll_channel_module_func_t = ::std::option::Option<unsafe extern "C" fn() -> *mut tll_channel_module_t>;
