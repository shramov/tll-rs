/* automatically generated by rust-bindgen 0.60.1 */

#![allow(dead_code, non_camel_case_types, non_upper_case_globals, non_snake_case)]

extern "C" {
    pub fn tll_scheme_load(
        url: *const ::std::os::raw::c_char,
        ulen: ::std::os::raw::c_int,
    ) -> *mut tll_scheme_t;
}
extern "C" {
    pub fn tll_scheme_copy(arg1: *const tll_scheme_t) -> *mut tll_scheme_t;
}
extern "C" {
    pub fn tll_scheme_ref(arg1: *const tll_scheme_t) -> *const tll_scheme_t;
}
extern "C" {
    pub fn tll_scheme_unref(arg1: *const tll_scheme_t);
}
extern "C" {
    pub fn tll_scheme_dump(
        s: *const tll_scheme_t,
        format: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub const TLL_SCHEME_FIELD_INT8: tll_scheme_field_type_t = 0;
pub const TLL_SCHEME_FIELD_INT16: tll_scheme_field_type_t = 1;
pub const TLL_SCHEME_FIELD_INT32: tll_scheme_field_type_t = 2;
pub const TLL_SCHEME_FIELD_INT64: tll_scheme_field_type_t = 3;
pub const TLL_SCHEME_FIELD_UINT8: tll_scheme_field_type_t = 4;
pub const TLL_SCHEME_FIELD_UINT16: tll_scheme_field_type_t = 5;
pub const TLL_SCHEME_FIELD_UINT32: tll_scheme_field_type_t = 6;
pub const TLL_SCHEME_FIELD_DOUBLE: tll_scheme_field_type_t = 7;
pub const TLL_SCHEME_FIELD_DECIMAL128: tll_scheme_field_type_t = 8;
pub const TLL_SCHEME_FIELD_BYTES: tll_scheme_field_type_t = 9;
pub const TLL_SCHEME_FIELD_MESSAGE: tll_scheme_field_type_t = 10;
pub const TLL_SCHEME_FIELD_ARRAY: tll_scheme_field_type_t = 11;
pub const TLL_SCHEME_FIELD_POINTER: tll_scheme_field_type_t = 12;
pub const TLL_SCHEME_FIELD_UNION: tll_scheme_field_type_t = 13;
pub const TLL_SCHEME_FIELD_UINT64: tll_scheme_field_type_t = 14;
pub type tll_scheme_field_type_t = ::std::os::raw::c_uint;
pub const TLL_SCHEME_SUB_NONE: tll_scheme_sub_type_t = 0;
pub const TLL_SCHEME_SUB_ENUM: tll_scheme_sub_type_t = 1;
pub const TLL_SCHEME_SUB_BYTE_STRING: tll_scheme_sub_type_t = 2;
pub const TLL_SCHEME_SUB_FIXED_POINT: tll_scheme_sub_type_t = 3;
pub const TLL_SCHEME_SUB_TIME_POINT: tll_scheme_sub_type_t = 4;
pub const TLL_SCHEME_SUB_DURATION: tll_scheme_sub_type_t = 5;
pub const TLL_SCHEME_SUB_BITS: tll_scheme_sub_type_t = 6;
pub type tll_scheme_sub_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_option_t {
    pub next: *mut tll_scheme_option_t,
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tll_scheme_option_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_option_t>(),
        24usize,
        concat!("Size of: ", stringify!(tll_scheme_option_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_option_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_option_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_option_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_option_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_option_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_option_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_option_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_option_t),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_enum_value_t {
    pub next: *mut tll_scheme_enum_value_t,
    pub name: *const ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_tll_scheme_enum_value_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_enum_value_t>(),
        24usize,
        concat!("Size of: ", stringify!(tll_scheme_enum_value_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_enum_value_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_enum_value_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_value_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_value_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_value_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_value_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_value_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_value_t),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_enum_t {
    pub next: *mut tll_scheme_enum_t,
    pub name: *const ::std::os::raw::c_char,
    pub type_: tll_scheme_field_type_t,
    pub size: usize,
    pub values: *mut tll_scheme_enum_value_t,
    pub options: *mut tll_scheme_option_t,
}
#[test]
fn bindgen_test_layout_tll_scheme_enum_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_enum_t>(),
        48usize,
        concat!("Size of: ", stringify!(tll_scheme_enum_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_enum_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_enum_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_t),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_values() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_t),
                "::",
                stringify!(values)
            )
        );
    }
    test_field_values();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_enum_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_enum_t),
                "::",
                stringify!(options)
            )
        );
    }
    test_field_options();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_union_t {
    pub next: *mut tll_scheme_union_t,
    pub name: *const ::std::os::raw::c_char,
    pub type_ptr: *mut tll_scheme_field_t,
    pub fields: *mut tll_scheme_field_t,
    pub fields_size: usize,
    pub union_size: usize,
    pub options: *mut tll_scheme_option_t,
}
#[test]
fn bindgen_test_layout_tll_scheme_union_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_union_t>(),
        56usize,
        concat!("Size of: ", stringify!(tll_scheme_union_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_union_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_union_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_union_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_union_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_union_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_union_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_type_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_union_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_ptr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_union_t),
                "::",
                stringify!(type_ptr)
            )
        );
    }
    test_field_type_ptr();
    fn test_field_fields() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_union_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_union_t),
                "::",
                stringify!(fields)
            )
        );
    }
    test_field_fields();
    fn test_field_fields_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_union_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fields_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_union_t),
                "::",
                stringify!(fields_size)
            )
        );
    }
    test_field_fields_size();
    fn test_field_union_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_union_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).union_size) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_union_t),
                "::",
                stringify!(union_size)
            )
        );
    }
    test_field_union_size();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_union_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_union_t),
                "::",
                stringify!(options)
            )
        );
    }
    test_field_options();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_bit_field_t {
    pub next: *mut tll_scheme_bit_field_t,
    pub name: *const ::std::os::raw::c_char,
    pub offset: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_tll_scheme_bit_field_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_bit_field_t>(),
        24usize,
        concat!("Size of: ", stringify!(tll_scheme_bit_field_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_bit_field_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_bit_field_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bit_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bit_field_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bit_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bit_field_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bit_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bit_field_t),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bit_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bit_field_t),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_bits_t {
    pub next: *mut tll_scheme_bits_t,
    pub name: *const ::std::os::raw::c_char,
    pub type_: tll_scheme_field_type_t,
    pub size: usize,
    pub values: *mut tll_scheme_bit_field_t,
    pub options: *mut tll_scheme_option_t,
}
#[test]
fn bindgen_test_layout_tll_scheme_bits_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_bits_t>(),
        48usize,
        concat!("Size of: ", stringify!(tll_scheme_bits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_bits_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_bits_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bits_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bits_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bits_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bits_t),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_values() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).values) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bits_t),
                "::",
                stringify!(values)
            )
        );
    }
    test_field_values();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_bits_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_bits_t),
                "::",
                stringify!(options)
            )
        );
    }
    test_field_options();
}
pub const TLL_SCHEME_TIME_NS: tll_scheme_time_resolution_t = 0;
pub const TLL_SCHEME_TIME_US: tll_scheme_time_resolution_t = 1;
pub const TLL_SCHEME_TIME_MS: tll_scheme_time_resolution_t = 2;
pub const TLL_SCHEME_TIME_SECOND: tll_scheme_time_resolution_t = 3;
pub const TLL_SCHEME_TIME_MINUTE: tll_scheme_time_resolution_t = 4;
pub const TLL_SCHEME_TIME_HOUR: tll_scheme_time_resolution_t = 5;
pub const TLL_SCHEME_TIME_DAY: tll_scheme_time_resolution_t = 6;
pub type tll_scheme_time_resolution_t = ::std::os::raw::c_uint;
pub const TLL_SCHEME_OFFSET_PTR_DEFAULT: tll_scheme_offset_ptr_version_t = 0;
pub const TLL_SCHEME_OFFSET_PTR_LEGACY_SHORT: tll_scheme_offset_ptr_version_t = 1;
pub const TLL_SCHEME_OFFSET_PTR_LEGACY_LONG: tll_scheme_offset_ptr_version_t = 2;
pub type tll_scheme_offset_ptr_version_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tll_scheme_field_t {
    pub next: *mut tll_scheme_field_t,
    pub options: *mut tll_scheme_option_t,
    pub name: *const ::std::os::raw::c_char,
    pub offset: usize,
    pub type_: tll_scheme_field_type_t,
    pub sub_type: tll_scheme_sub_type_t,
    pub size: usize,
    pub __bindgen_anon_1: tll_scheme_field_t__bindgen_ty_1,
    pub user: *mut ::std::os::raw::c_void,
    pub user_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub index: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tll_scheme_field_t__bindgen_ty_1 {
    pub type_msg: *mut tll_scheme_message_t,
    pub __bindgen_anon_1: tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2,
    pub type_enum: *mut tll_scheme_enum_t,
    pub fixed_precision: ::std::os::raw::c_uint,
    pub time_resolution: tll_scheme_time_resolution_t,
    pub __bindgen_anon_3: tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3,
    pub type_union: *mut tll_scheme_union_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1 {
    pub type_ptr: *mut tll_scheme_field_t,
    pub offset_ptr_version: tll_scheme_offset_ptr_version_t,
}
#[test]
fn bindgen_test_layout_tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_type_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(type_ptr)
            )
        );
    }
    test_field_type_ptr();
    fn test_field_offset_ptr_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset_ptr_version) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(offset_ptr_version)
            )
        );
    }
    test_field_offset_ptr_version();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2 {
    pub type_array: *mut tll_scheme_field_t,
    pub count_ptr: *mut tll_scheme_field_t,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_type_array() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_array) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(type_array)
            )
        );
    }
    test_field_type_array();
    fn test_field_count_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count_ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(count_ptr)
            )
        );
    }
    test_field_count_ptr();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3 {
    pub bitfields: *mut tll_scheme_bit_field_t,
    pub type_bits: *mut tll_scheme_bits_t,
}
#[test]
fn bindgen_test_layout_tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    fn test_field_bitfields() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bitfields) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(bitfields)
            )
        );
    }
    test_field_bitfields();
    fn test_field_type_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_bits) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1__bindgen_ty_3),
                "::",
                stringify!(type_bits)
            )
        );
    }
    test_field_type_bits();
}
#[test]
fn bindgen_test_layout_tll_scheme_field_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_field_t__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(tll_scheme_field_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_field_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(tll_scheme_field_t__bindgen_ty_1)
        )
    );
    fn test_field_type_msg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_msg) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1),
                "::",
                stringify!(type_msg)
            )
        );
    }
    test_field_type_msg();
    fn test_field_type_enum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_enum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1),
                "::",
                stringify!(type_enum)
            )
        );
    }
    test_field_type_enum();
    fn test_field_fixed_precision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixed_precision) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1),
                "::",
                stringify!(fixed_precision)
            )
        );
    }
    test_field_fixed_precision();
    fn test_field_time_resolution() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time_resolution) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1),
                "::",
                stringify!(time_resolution)
            )
        );
    }
    test_field_time_resolution();
    fn test_field_type_union() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_union) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t__bindgen_ty_1),
                "::",
                stringify!(type_union)
            )
        );
    }
    test_field_type_union();
}
impl ::std::fmt::Debug for tll_scheme_field_t__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "tll_scheme_field_t__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_tll_scheme_field_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_field_t>(),
        96usize,
        concat!("Size of: ", stringify!(tll_scheme_field_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_field_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_field_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(options)
            )
        );
    }
    test_field_options();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_sub_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sub_type) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(sub_type)
            )
        );
    }
    test_field_sub_type();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(user)
            )
        );
    }
    test_field_user();
    fn test_field_user_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_free) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(user_free)
            )
        );
    }
    test_field_user_free();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_field_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_field_t),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
impl ::std::fmt::Debug for tll_scheme_field_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "tll_scheme_field_t {{ next: {:?}, options: {:?}, name: {:?}, offset: {:?}, type: {:?}, sub_type: {:?}, size: {:?}, __bindgen_anon_1: {:?}, user: {:?}, user_free: {:?}, index: {:?} }}" , self . next , self . options , self . name , self . offset , self . type_ , self . sub_type , self . size , self . __bindgen_anon_1 , self . user , self . user_free , self . index)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_message_t {
    pub next: *mut tll_scheme_message_t,
    pub options: *mut tll_scheme_option_t,
    pub msgid: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub size: usize,
    pub fields: *mut tll_scheme_field_t,
    pub enums: *mut tll_scheme_enum_t,
    pub unions: *mut tll_scheme_union_t,
    pub user: *mut ::std::os::raw::c_void,
    pub user_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub bits: *mut tll_scheme_bits_t,
    pub pmap: *mut tll_scheme_field_t,
}
#[test]
fn bindgen_test_layout_tll_scheme_message_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_message_t>(),
        96usize,
        concat!("Size of: ", stringify!(tll_scheme_message_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_message_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_message_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(options)
            )
        );
    }
    test_field_options();
    fn test_field_msgid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).msgid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(msgid)
            )
        );
    }
    test_field_msgid();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_fields() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fields) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(fields)
            )
        );
    }
    test_field_fields();
    fn test_field_enums() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enums) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(enums)
            )
        );
    }
    test_field_enums();
    fn test_field_unions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unions) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(unions)
            )
        );
    }
    test_field_unions();
    fn test_field_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(user)
            )
        );
    }
    test_field_user();
    fn test_field_user_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_free) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(user_free)
            )
        );
    }
    test_field_user_free();
    fn test_field_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(bits)
            )
        );
    }
    test_field_bits();
    fn test_field_pmap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_message_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pmap) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_message_t),
                "::",
                stringify!(pmap)
            )
        );
    }
    test_field_pmap();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_import_t {
    pub next: *mut tll_scheme_import_t,
    pub url: *const ::std::os::raw::c_char,
    pub filename: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tll_scheme_import_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_import_t>(),
        24usize,
        concat!("Size of: ", stringify!(tll_scheme_import_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_import_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_import_t))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_import_t),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_url() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).url) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_import_t),
                "::",
                stringify!(url)
            )
        );
    }
    test_field_url();
    fn test_field_filename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_import_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_import_t),
                "::",
                stringify!(filename)
            )
        );
    }
    test_field_filename();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_internal_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tll_scheme_t {
    pub internal: *mut tll_scheme_internal_t,
    pub options: *mut tll_scheme_option_t,
    pub messages: *mut tll_scheme_message_t,
    pub enums: *mut tll_scheme_enum_t,
    pub aliases: *mut tll_scheme_field_t,
    pub unions: *mut tll_scheme_union_t,
    pub user: *mut ::std::os::raw::c_void,
    pub user_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub bits: *mut tll_scheme_bits_t,
}
#[test]
fn bindgen_test_layout_tll_scheme_t() {
    assert_eq!(
        ::std::mem::size_of::<tll_scheme_t>(),
        72usize,
        concat!("Size of: ", stringify!(tll_scheme_t))
    );
    assert_eq!(
        ::std::mem::align_of::<tll_scheme_t>(),
        8usize,
        concat!("Alignment of ", stringify!(tll_scheme_t))
    );
    fn test_field_internal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(internal)
            )
        );
    }
    test_field_internal();
    fn test_field_options() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(options)
            )
        );
    }
    test_field_options();
    fn test_field_messages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).messages) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(messages)
            )
        );
    }
    test_field_messages();
    fn test_field_enums() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enums) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(enums)
            )
        );
    }
    test_field_enums();
    fn test_field_aliases() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aliases) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(aliases)
            )
        );
    }
    test_field_aliases();
    fn test_field_unions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unions) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(unions)
            )
        );
    }
    test_field_unions();
    fn test_field_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(user)
            )
        );
    }
    test_field_user();
    fn test_field_user_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).user_free) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(user_free)
            )
        );
    }
    test_field_user_free();
    fn test_field_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<tll_scheme_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bits) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(tll_scheme_t),
                "::",
                stringify!(bits)
            )
        );
    }
    test_field_bits();
}
extern "C" {
    pub fn tll_scheme_option_free(arg1: *mut tll_scheme_option_t);
}
extern "C" {
    pub fn tll_scheme_bits_free(arg1: *mut tll_scheme_bits_t);
}
extern "C" {
    pub fn tll_scheme_enum_free(arg1: *mut tll_scheme_enum_t);
}
extern "C" {
    pub fn tll_scheme_field_free(arg1: *mut tll_scheme_field_t);
}
extern "C" {
    pub fn tll_scheme_message_free(arg1: *mut tll_scheme_message_t);
}
extern "C" {
    pub fn tll_scheme_union_free(arg1: *mut tll_scheme_union_t);
}
extern "C" {
    pub fn tll_scheme_fix(arg1: *mut tll_scheme_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_scheme_message_fix(arg1: *mut tll_scheme_message_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tll_scheme_field_fix(arg1: *mut tll_scheme_field_t) -> ::std::os::raw::c_int;
}
